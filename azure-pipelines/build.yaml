parameters:
- name: Azure
  type: object
- name: dependsOn
  type: object
  default: []

jobs:
- job: Build
  displayName: HELM
  pool:
    name: ${{ parameters['Azure']['Pool'] }}
  workspace:
    clean: all
  steps:
  - checkout: self
    path: s
  # - task: HelmInstaller@1
  #   inputs:
  #     helmVersionToInstall: '3.8.1'
  - bash: |
      helm lint
    displayName: "helm lint"
    workingDirectory: $(Agent.BuildDirectory)/s/k8s
  - bash: |
      helm template --values values.ci.yaml --output-dir output --debug test .
    displayName: "helm template"
    workingDirectory: $(Agent.BuildDirectory)/s/k8s
  # https://github.com/instrumenta/kubeval/issues/184
  - bash: |
      for file in $(find ./output -type f -iname '*.y*ml'); do
        cat $file 
      done
    displayName: "cat output/*.yaml"
    failOnStderr: true
    workingDirectory: $(Agent.BuildDirectory)/s/k8s
  # https://github.com/instrumenta/kubeval/issues/301
  - bash: |
      for file in $(find ./output -type f -iname '*.y*ml'); do
        kubeconform -verbose $file
      done
    displayName: "kubeconform output/*.yaml"
    failOnStderr: true
    workingDirectory: $(Agent.BuildDirectory)/s/k8s
  - task: Powershell@2
    displayName: OPA validate requests/limits
    continueOnError: false
    inputs:
      targetType: inline
      script: |
        [bool]$out = $true;
        [hashtable]$opa = @{
          "deployment.yaml" = "deployment.resources.rego"
          "job.yaml" = "job.resources.rego"
        };

        $opa.Keys | % {
          $result = opa eval -i "$(Pipeline.Workspace)/s/k8s/output/service/templates/$_" -d "$(Pipeline.Workspace)/s/opa/$($opa[$_])" "data.k8s_resources.allow"
          $result = $result | ConvertFrom-Json

          if($result.result[0].expressions.value -eq $true){
            Write-Host "$_ : Pod limits are valid";
          }
          else {
            Write-Host "$_ : OPA failed. Resource limits are not defined or memory requests are not equal to memory limits";
            $out = $false;
          }
        }

        if($out -eq $false) {
          Exit 1;
        }